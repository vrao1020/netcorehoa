<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HoaWebAPI</name>
    </assembly>
    <members>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingCollectionsController.GetBoardMeetingCollection(System.Collections.Generic.IEnumerable{System.Guid})">
             <summary>
             Returns a list of Board Meetings
             </summary>
            <remarks>
             Sample request:
            
                 GET api/BoardMeetingCollections/e77551ba-78e2-4a36-8754-3ea5f12e1619,e77551ba-78e2-4a36-8754-3ea5f12e1618
            
             </remarks>
             <param name="ids">A list of comma separated GUID</param>
             <returns>A list of requested BoardMeetings</returns>
             <response code="200">Returns a list of BoardMeetings</response>
             <response code="404">Returns 404 if requested BoardMeetings don't exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.GetBoardMeetings(Sieve.Models.SieveModel)">
             <summary>
             Returns a list of Board Meetings. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items.
             </summary>
            <remarks>
             Sample request:
            
                 GET api/BoardMeetings
                 ?sorts=         Title,Message         // sort by title and then by message 
                 &#38;filters=   OwnerEmail@=abc,      // filter to boardMeetings that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 BoardMeetings
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <returns>A list of Board Meetings that are paginated</returns>
             <response code="200">Returns a list of BoardMeetings</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.GetBoardMeeting(System.Guid)">
             <summary>
             Returns a single Board Meeting if it exists or a 404 if it does not
             </summary>
            <remarks>
             Sample request:
            
                 GET api/BoardMeetings/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the BoardMeeting to return</param>
             <returns>A single Board Meeting</returns>
             <response code="200">Returns the BoardMeeting requested</response>
             <response code="404">Returns a 404 if requested BoardMeeting does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.GetCurrentBoardMeetingDue">
             <summary>
             Returns a single Board Meeting that is is scheduled next (scheduled time is future dated and closest to current date)
             </summary>
            <remarks>
             Sample request:
            
                 GET api/BoardMeetings/GetCurrentBoardMeetingDue
            
             </remarks>
             <returns>A single Board Meeting that is scheduled next</returns>
             <response code="200">Returns the Board Meeting requested</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.CreateBoardMeeting(HoaEntities.Models.InputModels.BoardMeetingInputDto)">
             <summary>
             Creates a single boardMeeting 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/BoardMeetings
                 {
                    "title" :"Test-Title",
                    "description": "Test Message",
                    "scheduledTime": "2018-11-02T09:09:34.7209282-07:00"
                 }
            
             </remarks>
             <param name="boardMeetingInputDto">BoardMeeting to create</param>
             <returns>A newly created BoardMeeting</returns>
             <response code="201">Returns the newly created BoardMeeting</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.UpdateBoardMeeting(System.Guid,HoaEntities.Models.UpdateModels.BoardMeetingUpdateDto)">
             <summary>
             Updates a single boardMeeting 
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/BoardMeetings/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "title" :"Test-Title",
                    "message": "Test Message",
                    "url": "https://abc.windows.net@xyz.com",
                    "scheduledTime": "2018-11-02T09:09:34.7209282-07:00"
                 }
            
             </remarks>
             <param name="id">Id of the BoardMeeting to update</param>
             <param name="boardMeetingToUpdate">BoardMeeting that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating BoardMeeting is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.PartialUpdateBoardMeeting(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.BoardMeetingUpdateDto})">
             <summary>
             Updates a single boardMeeting with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/BoardMeetings/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/title",
                    "value": "Game of thrones boardMeeting"
                 }
            
             </remarks>
             <param name="id">Id of the BoardMeeting to update</param>
             <param name="patchDoc">BoardMeeting as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting BoardMeeting is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.DeleteBoardMeeting(System.Guid)">
             <summary>
             Deletes a single boardMeeting
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/BoardMeetings/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the BoardMeeting to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the BoardMeeting was not found</response>
             <response code="403">Returns 403 if user updating BoardMeeting is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.BoardMeetingsController.BlockBoardMeetingCreation(System.Guid)">
             <summary>
             This action exists to block boardMeeting creation by posting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/BoardMeetings/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the BoardMeeting</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if BoardMeeting already exists</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.GetCommentsForPost(System.Guid,Sieve.Models.SieveModel)">
             <summary>
             Returns a list of Comments. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items.
             </summary>
            <remarks>
             Sample request:
            
                 GET api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/comments
                 ?sorts=         Message               // sort by title and then by message 
                 &#38;filters=   OwnerEmail@=abc,      // filter to Comments that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 Comments
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <param name="postId">Id of the post to fetch the comments for</param>
             <returns>A list of Comments that are paginated</returns>
             <response code="200">Returns a list of Comments</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.GetCommentForPost(System.Guid,System.Guid)">
             <summary>
             Returns a single Comment if it exists or a 404 if it does not
             </summary>
            <remarks>
             Sample request:
            
                 GET api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/comments/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Comment to return</param>
             <param name="postId">Id of the post to get the comment for</param>
             <returns>A single Comment</returns>
             <response code="200">Returns the Comment requested</response>
             <response code="404">Returns a 404 if requested Comment does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.CreateCommentForPost(System.Guid,HoaEntities.Models.InputModels.CommentInputDto)">
             <summary>
             Creates a single comment 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/Comments
                 {
                    "message": "Test Message",
                    "parentId": "e77551ba-78e3-4a36-8754-3ea5f12e1688"
                 }
            
             </remarks>
             <param name="commentInputDto">Comment to create</param>
             <param name="postId">Id of the post to create the comment for</param>
             <returns>A newly created Comment</returns>
             <response code="201">Returns the newly created Comment</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.UpdateCommentForPost(System.Guid,System.Guid,HoaEntities.Models.UpdateModels.CommentUpdateDto)">
             <summary>
             Updates a single comment 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/Comments/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "message": "Test Message",
                    "parentId": "e77551ba-78e3-4a36-8754-3ea5f12e1688"
                 }
            
             </remarks>
             <param name="postId">Id of the post to update the comment for</param>
             <param name="id">Id of the Comment to update</param>
             <param name="commentToUpdate">Comment that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating Comment is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.PartialUpdateCommentForPost(System.Guid,System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.CommentUpdateDto})">
             <summary>
             Updates a single comment with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/Comments/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/message",
                    "value": "Game of thrones message"
                 }
            
             </remarks>
             <param name="postId">Id of the post to update the comment for</param>
             <param name="id">Id of the Comment to update</param>
             <param name="patchDoc">Comment as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting Comment is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.DeleteCommentForPost(System.Guid,System.Guid)">
             <summary>
             Deletes a single comment
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/Comments/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="postId">Id of the post to delete the comment for</param>
             <param name="id">Id of the Comment to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the Comment was not found</response>
             <response code="403">Returns 403 if user updating Comment is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.CommentsController.BlockCommentCreationForPost(System.Guid,System.Guid)">
             <summary>
             This action exists to block comment creation by commenting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/posts/e77551ba-78e3-4a36-8754-3ea5f12e1619/Comments/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="postId">Id of the post to check for the comment</param>
             <param name="id">Id of the Comment</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if Comment already exists</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventCollectionsController.GetEventCollection(System.Collections.Generic.IEnumerable{System.Guid})">
             <summary>
             Returns a list of Events
             </summary>
            <remarks>
             Sample request:
            
                 GET api/EventCollections/e77551ba-78e2-4a36-8754-3ea5f12e1619,e77551ba-78e2-4a36-8754-3ea5f12e1618
            
             </remarks>
             <param name="ids">A list of comma separated GUID</param>
             <returns>A list of requested Events</returns>
             <response code="200">Returns a list of Events</response>
             <response code="404">Returns 404 if requested Events don't exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventCollectionsController.CreateEventCollection(System.Collections.Generic.IEnumerable{HoaEntities.Models.InputModels.EventInputDto})">
             <summary>
             Creates a collections of Events
             </summary>
            <remarks>
             Sample request:
            
                 POST api/EventCollections
                 [{
                     "title": "Test1",
                     "message": "Test Message",
                     "url": "https://abc.windows.net@xyz.com",
                     "scheduledTime": "2018-10-31T16:22:15.9339311-07:00",
                     "userId" : "5f76bd52-b065-487a-89ca-c9ec6a9b60c9"
                 },
                 {
                     "title": "TEST2",
                     "message": "TEST",
                     "url": "a",
                     "scheduledTime": "2018-10-31T16:22:15.9339311-07:00",
                     "userId" : "5f76bd52-b065-487a-89ca-c9ec6a9b60c9"
                 }]
            
             </remarks>
             <param name="events">Events to create</param>
             <returns>A newly created Event collection</returns>
             <response code="201">Returns the newly created Events collection</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.GetEvents(Sieve.Models.SieveModel)">
             <summary>
             Returns a list of events. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items.
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Events
                 ?sorts=         Title,Message         // sort by title and then by message 
                 &#38;filters=   OwnerEmail@=abc,      // filter to events that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 Events
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <returns>A list of events that are paginated</returns>
             <response code="200">Returns a list of Events</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.GetEvent(System.Guid)">
             <summary>
             Returns a single Event if it exists or a 404 if it does not
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Events/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Event to return</param>
             <returns>A single Event</returns>
             <response code="200">Returns the Event requested</response>
             <response code="404">Returns a 404 if requested Event does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.GetCurrentEventDue">
             <summary>
             Returns a single Event that is is scheduled next (scheduled time is future dated and closest to current date)
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Events/GetCurrentEventDue
            
             </remarks>
             <returns>A single Event that is scheduled next</returns>
             <response code="200">Returns the Event requested</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.CreateEvent(HoaEntities.Models.InputModels.EventInputDto)">
             <summary>
             Creates a single event 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Events
                 {
                    "title" :"Test-Title",
                    "message": "Test Message",
                    "url": "https://abc.windows.net@xyz.com",
                    "scheduledTime": "2018-11-02T09:09:34.7209282-07:00"
                 }
            
             </remarks>
             <param name="eventInputDto">Event to create</param>
             <returns>A newly created Event</returns>
             <response code="201">Returns the newly created Event</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.UpdateEvent(System.Guid,HoaEntities.Models.UpdateModels.EventUpdateDto)">
             <summary>
             Updates a single event 
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/Events/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "title" :"Test-Title",
                    "message": "Test Message",
                    "url": "https://abc.windows.net@xyz.com",
                    "scheduledTime": "2018-11-02T09:09:34.7209282-07:00"
                 }
            
             </remarks>
             <param name="id">Id of the Event to update</param>
             <param name="eventToUpdate">Event that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating Event is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.PartialUpdateEvent(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.EventUpdateDto})">
             <summary>
             Updates a single event with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/Events/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/title",
                    "value": "Game of thrones event"
                 }
            
             </remarks>
             <param name="id">Id of the Event to update</param>
             <param name="patchDoc">Event as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting Event is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.DeleteEvent(System.Guid)">
             <summary>
             Deletes a single event
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/Events/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Event to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the Event was not found</response>
             <response code="403">Returns 403 if user updating Event is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.EventsController.BlockEventCreation(System.Guid)">
             <summary>
             This action exists to block event creation by posting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Events/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Event</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if Event already exists</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.GetAllMeetingMinutes(Sieve.Models.SieveModel)">
             <summary>
             Returns a list of MeetingMinutes. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items.
             </summary>
            <remarks>
             Sample request:
            
                 GET api/MeetingMinutes
                 ?sorts=         FileName              // sort by name and then by url 
                 &#38;filters=   OwnerEmail@=abc,      // filter to events that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 Events
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <returns>A list of MeetingMinutes that are paginated</returns>
             <response code="200">Returns a list of MeetingMinutes</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.GetMeetingMinute(System.Guid,System.Guid)">
             <summary>
             Returns a single MeetingMinute if it exists or a 404 if it does not
             </summary>
            <remarks>
             Sample request:
            
                 GET api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="id">Id of the MeetingMinute to return</param>
             <returns>A single MeetingMinute</returns>
             <response code="200">Returns the MeetingMinute requested</response>
             <response code="404">Returns a 404 if requested MeetingMinute does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.CreateMeetingMinute(System.Guid,HoaEntities.Models.InputModels.MeetingMinuteInputDto)">
             <summary>
             Creates a single MeetingMinutes 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes
                 {
                    "FileName" :"Test-Title.txt"
                 }
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="meetingMinuteInputDto">MeetingMinute to create</param>
             <returns>A newly created MeetingMinute</returns>
             <response code="201">Returns the newly created MeetingMinute</response>
             <response code="400">Returns 400 if the input is incorrect</response>
             <response code="409">Returns 409 if the board meeting already contains a meeting minute</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.UpdateMeetingMinute(System.Guid,System.Guid,HoaEntities.Models.UpdateModels.MeetingMinuteUpdateDto)">
             <summary>
             Updates a single MeetingMinute 
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "FileName" :"Test-Title.txt"
                 }
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="id">Id of the MeetingMinute to update</param>
             <param name="meetingMinuteToUpdate">MeetingMinute that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating MeetingMinute is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.PartialUpdateMeetingMinute(System.Guid,System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.MeetingMinuteUpdateDto})">
             <summary>
             Updates a single MeetingMinute with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/filename",
                    "value": "Game of thrones event.txt"
                 }
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="id">Id of the MeetingMinute to update</param>
             <param name="patchDoc">Event as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting MeetingMinute is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.DeleteMeetingMinute(System.Guid,System.Guid)">
             <summary>
             Deletes a single MeetingMinute
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="id">Id of the MeetingMinute to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the Event was not found</response>
             <response code="403">Returns 403 if user deleting the MeetingMinute is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.MeetingMinutesController.BlockMeetingMinuteCreation(System.Guid,System.Guid)">
             <summary>
             This action exists to block MeetingMinute creation by posting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/BoardMeetings/e77551ba-78e3-4a36-8754-3ea5f12e1619/MeetingMinutes/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="boardMeetingId">Id of the board meeting</param>
             <param name="id">Id of the MeetingMinute</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if MeetingMinute already exists</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostCollectionsController.GetPostCollection(System.Collections.Generic.IEnumerable{System.Guid})">
             <summary>
             Returns a list of Posts
             </summary>
            <remarks>
             Sample request:
            
                 GET api/PostCollections/e77551ba-78e2-4a36-8754-3ea5f12e1619,e77551ba-78e2-4a36-8754-3ea5f12e1618
            
             </remarks>
             <param name="ids">A list of comma separated GUID</param>
             <returns>A list of requested Posts</returns>
             <response code="200">Returns a list of Posts</response>
             <response code="404">Returns 404 if requested Posts don't exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostCollectionsController.CreatePostCollection(System.Collections.Generic.IEnumerable{HoaEntities.Models.InputModels.PostInputDto})">
             <summary>
             Creates a collections of Posts
             </summary>
            <remarks>
             Sample request:
            
                 POST api/PostCollections
                 [{
                     "title": "Test1",
                     "message": "Test Message",
                     "important": "false"
                 },
                 {
                     "title": "TEST2",
                     "message": "TEST",
                     "important": "true"
                 }]
            
             </remarks>
             <param name="posts">Posts to create</param>
             <returns>A newly created Posts collection</returns>
             <response code="201">Returns the newly created Posts collection</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.GetPosts(Sieve.Models.SieveModel)">
             <summary>
             Returns a list of Posts. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items.
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Posts
                 ?sorts=         Title,Message         // sort by title and then by message 
                 &#38;filters=   OwnerEmail@=abc,      // filter to Posts that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 Posts
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <returns>A list of Posts that are paginated</returns>
             <response code="200">Returns a list of Posts</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.GetPost(System.Guid)">
             <summary>
             Returns a single Post if it exists or a 404 if it does not
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Posts/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Post to return</param>
             <returns>A single Post</returns>
             <response code="200">Returns the Post requested</response>
             <response code="404">Returns a 404 if requested Post does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.GetLatestPost">
             <summary>
             Returns the latest post
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Posts/GetLatestPost
            
             </remarks>
             <returns>A single Post</returns>
             <response code="200">Returns the latest Post</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.CreatePost(HoaEntities.Models.InputModels.PostInputDto)">
             <summary>
             Creates a single event 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Posts
                 {
                    "title" :"Test-Title",
                    "message": "Test Message",
                    "important": "false"
                 }
            
             </remarks>
             <param name="postInputDto">Post to create</param>
             <returns>A newly created Post</returns>
             <response code="201">Returns the newly created Post</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.UpdatePost(System.Guid,HoaEntities.Models.UpdateModels.PostUpdateDto)">
             <summary>
             Updates a single event 
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/Posts/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "title" :"Test-Title",
                    "message": "Test Message",
                    "important": "false"
                 }
            
             </remarks>
             <param name="id">Id of the Post to update</param>
             <param name="postToUpdate">Post that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating Post is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.PartialUpdatePost(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.PostUpdateDto})">
             <summary>
             Updates a single event with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/Posts/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/title",
                    "value": "Game of thrones event"
                 }
            
             </remarks>
             <param name="id">Id of the Post to update</param>
             <param name="patchDoc">Post as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting Post is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.DeletePost(System.Guid)">
             <summary>
             Deletes a single event
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/Posts/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Post to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the Post was not found</response>
             <response code="403">Returns 403 if user updating Post is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.PostsController.BlockPostCreation(System.Guid)">
             <summary>
             This action exists to block event creation by posting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Posts/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the Post</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if Post already exists</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.GetCurrentUser">
             <summary>
             Returns the current User that is logged into the web application
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Users/CurrentUser
                 
             </remarks>
             <returns>The current User that is logged into the web application</returns>
             <response code="200">The current User that is logged into the web application</response>
             <response code="400">Returns 400 is user is not found</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.GetUsers(Sieve.Models.SieveModel)">
             <summary>
             Returns a list of Users. Returned items are paginated with a default page size
             of 5 items upto a max of 10 items. Only accessible by Administrators
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Users
                 ?sorts=         FirstName,LastName    // sort by FirstName and then by LastName 
                 &#38;filters=   Email@=abc,           // filter to Users that contains the phrase "abc"
                 &#38;page=      1                     // get the first page...
                 &#38;pageSize=  10                    // ...which contains 10 Users
            
             </remarks>
             <param name="sieveModel.Filters.Filters">See sample request for example of the input parameter</param>
             <returns>A list of Users that are paginated</returns>
             <response code="200">Returns a list of Users</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.GetUser(System.Guid)">
             <summary>
             Returns a single User if it exists or a 404 if it does not. Only accessible by Administrators
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the User to return</param>
             <returns>A single User</returns>
             <response code="200">Returns the User requested</response>
             <response code="404">Returns a 404 if requested User does not exist</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.GetReminderEmails">
             <summary>
             Returns a list of user emails who have opted to receive reminders
             </summary>
            <remarks>
             Sample request:
            
                 GET api/Users/ReminderEmails
            
             </remarks>
             <returns>A single User</returns>
             <response code="200">Returns the emails of all users who opted to receive reminders</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.CreateUser(HoaEntities.Models.InputModels.UserInputDto)">
             <summary>
             Creates a single User 
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Users
                 {
                    "firstname" :"Test-Title",
                    "lastname": "Test Message",
                    "reminder": "false",
                    "email": "abc@gmail.com"
                 }
            
             </remarks>
             <param name="userInputDto">User to create</param>
             <returns>A newly created User</returns>
             <response code="201">Returns the newly created User</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.DeactivateUser">
             <summary>
             Deactivates the current user logged into the web application
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Users/DeactiveUser
            
             </remarks>
             <returns>Deactivates the current logged in user</returns>
             <response code="204">No content if successful</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.ActivateUser">
             <summary>
             Activates the current user logged into the web application
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Users/ActivateUser
            
             </remarks>
             <returns>Activates the current logged in user</returns>
             <response code="204">No content if successful</response>
             <response code="400">Returns 400 if the input is incorrect</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.UpdateUser(HoaEntities.Models.UpdateModels.UserUpdateDto)">
             <summary>
             Updates the currently logged in User 
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "firstname" :"Test-Title",
                    "lastname": "Test Message",
                    "reminder": "false",
                    "email": "abc@gmail.com"
                 }
            
             </remarks>
             <param name="userToUpdate">User that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating User is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.UpdateUser(System.Guid,HoaEntities.Models.UpdateModels.UserUpdateDto)">
             <summary>
             Updates a single User. Only accessible by Administrators
             </summary>
            <remarks>
             Sample request:
            
                 PUT api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "firstname" :"Test-Title",
                    "lastname": "Test Message",
                    "reminder": "false",
                    "email": "abc@gmail.com"
                 }
            
             </remarks>
             <param name="id">Id of the User to update</param>
             <param name="userToUpdate">User that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user updating User is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.PartialUpdateUser(Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{HoaEntities.Models.UpdateModels.UserUpdateDto})">
             <summary>
             Updates the currently logged in User with a JSON patch document
             </summary>
            <remarks>
             Sample request:
            
                 PATCH api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
                 {
                    "op": "replace",
                    "path": "/firstname",
                    "value": "Game of thrones User"
                 }
            
             </remarks>
             <param name="patchDoc">User as a patch document that needs to be updated</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="403">Returns 403 if user deleting User is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.DeleteUser(System.Guid)">
             <summary>
             Deletes a single User. Only accessible by Administrators
             </summary>
            <remarks>
             Sample request:
            
                 DELETE api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the User to delete</param>
             <returns>No Content</returns>
             <response code="204">Returns 204 if successful</response>
             <response code="400">Returns 404 if the User was not found</response>
             <response code="403">Returns 403 if user updating User is not the owner of it</response>
        </member>
        <member name="M:HoaWebAPI.Controllers.UsersController.BlockUserCreation(System.Guid)">
             <summary>
             This action exists to block User creation by posting with an Id. This is to adhere to REST practices
             </summary>
            <remarks>
             Sample request:
            
                 POST api/Users/e77551ba-78e2-4a36-8754-3ea5f12e1619
            
             </remarks>
             <param name="id">Id of the User</param>
             <returns>No Content</returns>
             <response code="400">Returns 404 if the input is incorrect</response>
             <response code="409">Returns 409 if User already exists</response>
        </member>
    </members>
</doc>
