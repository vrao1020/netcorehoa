using Microsoft.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.Swagger;
using System;
using System.IO;

namespace HoaWebAPI.Extensions.ServiceConfiguration
{
    public static class SwaggerService
    {
        public static IServiceCollection AddSwagger(this IServiceCollection services)
        {
            //add Swagger for API information
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new Info
                {
                    Title = "HOA API",
                    Version = "v1",
                    Description = "API for accessing / managing Posts, Users, Board Meetings, Events, and Comments",
                    Contact = new Contact()
                    {
                        Email = "abc@123.com",
                        Name = "ABC R",
                        Url = "N/A"
                    },
                    License = new License()
                    {
                        Name = "MIT License",
                        Url = "https://opensource.org/licenses/MIT"
                    }
                });
                //Locate the XML file being generated by ASP.NET...
                var xmlPath = Path.Combine(AppContext.BaseDirectory, "SwaggerComments.xml");
                //... and tell Swagger to use those XML comments.
                c.IncludeXmlComments(xmlPath);

                //temporary workaround until namespace issue with this library is fixed (see below for actual extension method)
                //c.SchemaFilter<FluentValidationRules>();
                //c.OperationFilter<FluentValidationOperationFilter>();

                //add fluent validation rules to swagger as otherwise required fields / character limits will not show up in swagger doc
                //this is because by default swagger looks for attributes on the model class
                c.AddFluentValidationRules();

                //add security definition so that user can authorize through swagger and call the API
                //need to verify how this should be configured
                c.AddSecurityDefinition("oidc", new OAuth2Scheme
                {
                    Flow = "Authorization Code",
                    Description = "Please enter JWT with Bearer into field",
                    AuthorizationUrl = "Authorization",
                    TokenUrl = "apiKey"
                }
                );

            });

            return services;
        }
    }
}
