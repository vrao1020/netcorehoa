// Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your Javascript code.

'use strict';

$(function () {

    //creates a success modal when the users account is created
    //this will only occur once per user
    var userCreatedElement = $('#user-created');
    if (userCreatedElement.length !== 0) {
        Swal.fire({
            title: '<div class="text-primary">Account Created</div>',
            type: 'success',
            html: 'Your account has been created. The admin will assign your role as soon as possible. If you have questions or problems, please send the ' + ' admin an email through the <strong class="font-weight-bold">Contact Admin</strong> link.',
            showCloseButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'btn btn-success',
            confirmButtonText: "Close"
        });
    }

    //creates a success modal when the users registers without a social account
    var userRegisteredElement = $('#userregistered');
    if (userRegisteredElement.length !== 0) {
        Swal.fire({
            title: '<div class="text-primary">Confirm Email</div>',
            type: 'success',
            html: 'Thank you for registering. You will need to confirm your email before logging in. Please check your email ' + ' for a confirmation email.',
            showCloseButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'btn btn-success',
            confirmButtonText: "Close"
        });
    }

    //creates a success modal when the users clicked on forgot password for local account
    var userRegisteredElement = $('#forgotpassword');
    if (userRegisteredElement.length !== 0) {
        Swal.fire({
            title: '<div class="text-primary">Forgot Password</div>',
            type: 'success',
            html: 'An email has been sent with a link to reset your password.',
            showCloseButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'btn btn-success',
            confirmButtonText: "Close"
        });
    }

    //creates a success modal when the users reset their password
    var userRegisteredElement = $('#passwordreset');
    if (userRegisteredElement.length !== 0) {
        Swal.fire({
            title: '<div class="text-primary">Password Reset</div>',
            type: 'success',
            html: 'Your password has been successfully reset. Please log in with your new password.',
            showCloseButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'btn btn-success',
            confirmButtonText: "Close"
        });
    }

    //check if the index page has the timer-id element
    var getBoardTimerValue = $('#timer-id');
    if (getBoardTimerValue.length !== 0) {
        var timerBody = $('.timer-body');

        var countDownDate = new Date(getBoardTimerValue.attr('data-time')).getTime();
        // Update the count down every 1 second
        var x = setInterval(function () {

            // Get todays date and time
            var now = new Date().getTime();

            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
            var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));
            var seconds = Math.floor(distance % (1000 * 60) / 1000);

            // Display the result in the element with id="demo"
            timerBody.text(days + "d " + hours + "h " + minutes + "m " + seconds + "s ");

            // If the count down is finished, write some text
            if (distance < 0) {
                clearInterval(x);
                timerBody.text("");
                $('#timer-card').hide();
            }
        }, 1000);
    } else {
        $('#timer-card').hide();
    }

    //on click of the browse button, clear value as otherwise if they try to upload
    //a new file, the event will not fire
    //event is bound to document because below element is dynamically generated by javascript
    $(document).on('click', '#customFile', function () {
        this.value = null;
    });

    //extra javascript is required to change the bootstrap file browser
    //not adding below will not show the selected file name to be displayed
    //event is bound to document because below element is dynamically generated by javascript
    $(document).on('change', '#customFile', function () {
        //get the file name
        var fileName = $(this).val();
        var cleanFileName = fileName.replace('C:\\fakepath\\', " ");
        //replace the "Choose a file" label
        $('.custom-file-label').html(cleanFileName);
    });

    //add a click event handler on the create edit that will create a modal
    $('a[data-modal="delete-modal"]').click(function (event) {

        var deleteContent = '';

        if ($(this).attr('data-deleteRelated') === "true") {
            //fetch the url from the form's action attribute
            //this url is for deleting child items (i.e. meeting minute)
            deleteContent = $('.deleteRelatedItem');
        } else {
            //fetch the url from the form's action attribute
            //this url is for deleting parent items (i.e. board meeting)
            deleteContent = $('.deleteItem');
        }

        //fetch the delete id of the button that was clicked and
        //set the value of the form to the id fetched
        var deleteId = $(this).attr('data-id');
        deleteContent.find('#deleteId').attr('value', deleteId);

        //fetch the delete id of the parent element (e.g. deleting a comment required post id)
        //set the value of the form to the id fetched
        var deleteParentId = $(this).attr('data-parentId');
        deleteContent.find('#deleteParentId').attr('value', deleteParentId);

        //create a modal dynamically
        Swal.fire({
            title: 'Are you sure?',
            type: 'warning',
            html: '' + deleteContent.html(),
            showCloseButton: true,
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'btn btn-danger create-edit-delete',
            confirmButtonText: "Yes",
            cancelButtonClass: 'btn btn-primary',
            reverseButtons: true,
            allowOutsideClick: function allowOutsideClick() {
                return !Swal.isLoading();
            }
        }).then(function (result) {
            //if user clicked on confirm
            if (result.value) {

                //show the swal loading status
                Swal.showLoading();

                //get the delete form within the modal
                var deleteForm = $('.swal2-content').find('form');

                //fetch the action (url to post to) from the form
                var actionUrl = deleteForm.attr('action');

                //serialize the form data to be sent
                var dataToSend = deleteForm.serialize();

                //post the data to the server
                $.post(actionUrl, dataToSend).done(function (data) {
                    //if successful show a success message
                    if (data === "Success") {
                        Swal.fire('Deleted!', 'The item was deleted successfully', 'success').then(function () {
                            //redirect the user to the current url they were on
                            var currentUrl = window.location.href;
                            window.location = currentUrl;
                        });
                    }
                    //post failed, so show error message
                    //no need to refresh the page due to failure
                    else {
                            Swal.fire('Error', 'An error occured. Please try again later', 'error');
                        }
                });
            }
        });
    });

    //event for reloading the page when page size changes
    $(".page-size-control").change(function () {
        //split the url that the user is on
        var currentUrl = window.location.href.split('/');

        //if user is not on a subpage for an item (i.e. /posts/1/comments)
        //then extract route name and refresh page with new page size
        if (currentUrl.length <= 5) {
            var routeName = currentUrl[3];
            window.location = '/' + routeName + '/1?pageSize=' + $(".page-size-control").val();
        } else {
            //user is on a subpage for an item (i.e. /posts/1/comments)
            //need to include those in the route and refresh page with new page size
            window.location = '/' + currentUrl[3] + '/' + currentUrl[4] + '/' + currentUrl[5] + '/1?pageSize=' + $(".page-size-control").val();
        }
    });

    //create a function to show a toast modal on successful create/edit/delete
    function showSuccessToastModal(toastMessage) {
        //create a toast pop-up
        var Toast = Swal.mixin({
            toast: true,
            position: 'top-right',
            showConfirmButton: false,
            timer: 6000
        });

        //trigger the toast modal
        Toast.fire({
            type: 'success',
            title: '' + toastMessage
        });
    }

    //get the session storage variable and trigger the toast modal if it exists
    var itemCreatedEditedDeleted = sessionStorage.getItem("itemModified");
    if (itemCreatedEditedDeleted) {
        sessionStorage.removeItem("itemModified");
        showSuccessToastModal("Your changes were saved successfully.");
    }

    var boardEmailSent = sessionStorage.getItem("boardemail");
    if (boardEmailSent) {
        sessionStorage.removeItem("boardemail");
        showSuccessToastModal("Your email was sent successfully.");
    }

    //add a click event handler on the create edit that will create a modal
    $('button[data-modal="create-edit-modal"], a[data-modal="create-edit-modal"]').click(function (event) {

        //fetch the url from the form's action attribute
        var url = $(this).data('url');

        $.get(url).done(function (data) {
            //create a modal dynamically
            Swal.fire({
                title: $(this).data('title'),
                html: '' + data,
                showCloseButton: true,
                showCancelButton: true,
                buttonsStyling: false,
                confirmButtonClass: 'btn btn-dark text-light create-edit-delete',
                confirmButtonText: "Submit",
                cancelButtonClass: 'btn btn-danger',
                reverseButtons: true,
                allowOutsideClick: function allowOutsideClick() {
                    return !Swal.isLoading();
                }
            });

            //if text area content exists, fetch it
            var textAreaContent = $('#text-area-content').val();

            //initialize date time picker, unobstrusive validation, tinyMCE
            $('#datetimepicker1').datetimepicker({ defaultDate: moment(), minDate: moment().subtract(5, 'm') });
            //need to set unobtrusive validation defaults to not ignore hidden fields
            //by default unobstrusive validation will ignore hidden fields and tinyMCE makes the text area hidden
            //to prevent submission of blank value, remove this default setting
            $.validator.setDefaults({ ignore: '' });
            $.validator.unobtrusive.parse(".vn");
            tinyMCE.remove();
            tinymce.init({
                //initialize tincy MCE and also pre-populate the content if it is not null
                selector: '#tinymcetextarea',
                plugins: "lists,link",
                invalid_elements: "script,object,embed,link,style,form,input,iframe",
                init_instance_callback: function init_instance_callback() {
                    tinyMCE.activeEditor.setContent('' + textAreaContent);
                }
            });

            //replace the submit button with a new button
            //this removes all of the event handlers on the button
            //this is to prevent the sweetalert2 handlers from triggering as there is
            //no other way to remove them
            $('.create-edit-delete').replaceWith($('.create-edit-delete').clone());
        });
    });

    $(document).on('click', '.create-edit-delete', function (e) {
        //stop the default click handler
        e.preventDefault();

        //disable the confirm button so user cannot submit form twice
        //disable the button to prevent user from clicking on it multiple times
        var saveButton = $('.swal2-confirm');
        saveButton.attr("disabled", "disabled");

        //show the swal loading status
        Swal.showLoading();
        tinyMCE.triggerSave();
        //fetch the form within the modal
        var form = $('.swal2-content').find('form');

        //run jquery unobtrusive validation function to validate if the form is valid
        form.validate();

        if (form.valid()) {

            //fetch the action (url to post to) from the form
            var actionUrl = form.attr('action');

            //save the data from tinyMCE into the text area
            //if this is not triggered, the data from tinymce is never posted
            //with the ajax request as the underlying text area will not have a value
            tinyMCE.triggerSave();

            //normally, the form is serialized so that it can be sent via POST
            //in this case, the form contains a file uploaded by the user
            //the only way to send file data is to convert the form to FormData
            //this will send file contents to the controller as well
            var dataToSend = new FormData(form.get(0));

            //use ajax to send the data to the url fetched above
            $.ajax({ url: actionUrl, method: 'post', data: dataToSend, processData: false, contentType: false }).done(function (data) {
                //when the ajax post is complete, replace the entire body of the modal with the
                //data fetched from the partial page
                //this will contain any model state errors if they exist

                //from the response data, filter what is found based on the selector .modal-body
                //below statement will select the contents of the modal-body from the data object
                //see http://api.jquery.com/jquery/#jQuery-html-ownerDocument for info
                //this selector will look for an element with the modal-body class starting at the root
                //element BUT will ignore the root element itself                   
                form.replaceWith(data);

                //fetch the form within the modal
                form = $('.swal2-content').find('form');
                //re-attach jquey unobtrusive validation because a new form is fetched again
                //see above for why setDefaults is set to also validate hidden fields
                $.validator.setDefaults({ ignore: '' });
                $.validator.unobtrusive.parse(".vn");

                //by default a new form has this set to valid - if a user does not have any
                //errors, the form will be submitted, and a new empty form will be returned
                //we check for this to verify that the form has been accepted
                //otherwise there is no way to know that the form has been accepted or not
                var getValidElement = form.find('[name="IsValid"]');
                var isValid = getValidElement.val() == 'True';

                //in case the IsValid element is missing, do not continue. Remove the loading modal
                //and return so that the user cannot submit the form again
                //form is also checked as in some cases, the form will be replaced entirely by
                //an error message
                if (getValidElement.length === 0 || form.length === 0) {
                    Swal.hideLoading();
                    return;
                }

                //if valid, redirect user to the page they were on when they clicked the modal
                //this preserves all of the pagination data
                //might need to consider what happens when only 1 element exists on the last page
                if (isValid) {
                    //check if the form contains a div with a class of contact-board
                    //this means that the user sent an email to the board
                    var getBoardContactElement = form.find('.contact-board');
                    if (getBoardContactElement.length !== 0) {
                        //set value in session storage that item was modified
                        sessionStorage.setItem("boardemail", "true");
                    } else {
                        //set value in session storage that item was modified
                        sessionStorage.setItem("itemModified", "true");
                    }

                    //redirect the user to the current url they were on
                    var currentUrl = window.location.href;
                    window.location = currentUrl;
                } else {
                    //re-enable confirm button so that it can be submitted again
                    Swal.hideLoading();
                    saveButton.removeAttr("disabled", "disabled");

                    //reinitialize datetime picker and tinymce
                    //this needs to be done because the modal is dynamically loaded
                    //the prior rules for date picker and the text area are removed as we replace the modal body
                    //if this is skipped, user can submit a prior date and the textarea is a plain html5 text area
                    $('#datetimepicker1').datetimepicker({ defaultDate: moment(), minDate: moment().subtract(5, 'm') });
                    tinyMCE.remove();
                    tinymce.init({
                        selector: '#tinymcetextarea',
                        invalid_elements: "script,object,embed,link,style,form,input,iframe",
                        plugins: "lists,link"
                    });
                }
            });
        } else {
            //re-enable confirm button so that it can be submitted again
            Swal.hideLoading();
            saveButton.removeAttr("disabled", "disabled");
        }
    });
});

